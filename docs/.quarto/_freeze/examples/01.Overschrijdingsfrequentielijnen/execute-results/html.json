{
  "hash": "47737ad54c2050c359aa3ed5d7d4acf3",
  "result": {
    "engine": "jupyter",
    "markdown": "<h1>Overschrijdingsfrequentielijnen</h1>\n\nAllereerst importeren we de nieuwe Pydra vanuit hkvpy\n\n::: {#87fa37bd .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimport pydra_core as pydra\n```\n:::\n\n\nAls demonstratie worden overschrijdingsfrequentielijnen voor de Borselle (Westerschelde/Kust) bepaald. Hieronder definiëren we de locatie van de database.\n\n::: {#61fc0ade .cell execution_count=2}\n``` {.python .cell-code}\nDB_PATH = \"data/WBI2017_Westerschelde_30-4_v03.sqlite\"\n```\n:::\n\n\n<h3>HRDatabase</h3>\n\nMet de HR database maken we een <i>HRDatabase</i> aan. Dit object beheert alle locaties in de HR database en helpt om batch berekeningen te maken.\n\n::: {#1cc0693b .cell execution_count=3}\n``` {.python .cell-code}\nhrdatabase = pydra.HRDatabase(DB_PATH)\n```\n:::\n\n\nEén van de functies van een <i>HRDatabase</i> object is het uitlezen van de namen van alle uitvoerpunten.\n\n::: {#3df5cc0d .cell execution_count=4}\n``` {.python .cell-code}\nhrdatabase.get_location_names()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n['WS_1_30-4_dk_00006',\n 'WS_2_30-4_dk_00005',\n 'WS_1_30-4_dk_00004',\n 'WS_1_30-4_dk_00003',\n 'WS_1_30-4_dk_00002',\n 'WS_1_30-4_dk_00001']\n```\n:::\n:::\n\n\n<h3>Settings</h3>\n\nMet het <i>HRDatabase</i> maken we een <i>Settings</i> object aan voor het HR-uitvoerpunt 'WS_1_30-4_dk_00002'. Het <i>Settings</i> object is voor Pydra hetzelfde als het 'invoer.hyd' bestand voor Hydra-NL is.\n\n::: {#b5ba5e40 .cell execution_count=5}\n``` {.python .cell-code}\nsettings = hrdatabase.get_settings(\"WS_1_30-4_dk_00002\")\n```\n:::\n\n\nDe settings zijn gebaseerd op wat standaard in Hydra-NL (versie 2.8.2) zit. Het is mogelijk om alle settings uit te lezen door het <i>Settings</i> object te printen.\n\n::: {#9232898b .cell execution_count=6}\n``` {.python .cell-code}\nprint(settings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndatabase_path                  = data/WBI2017_Westerschelde_30-4_v03.sqlite\nlocation                       = WS_1_30-4_dk_00002\nm_max                          = 9.0\nm_step                         = 0.1\nmodel_uncertainty_water_level_steps = 7\nmodel_uncertainty_wave_height_steps = 5\nmodel_uncertainty_wave_period_steps = 5\nperiods_block_duration         = 360.0\nregion                         = 5.0\nsea                            = 11.0\nsea_level_probability_point1   = Zeewaterstand\\Vlissingen\\CondPovVlissingen_12u_zichtjaar2017_metOnzHeid.txt\nsea_level_probability_point2   = Zeewaterstand\\Hansweert\\CondPovHansweert_12u_zichtjaar2017_metOnzHeid.txt\nsea_level_probability_point3   = Zeewaterstand\\Vlissingen virtueel\\CondPovVlissingen-Additional_12u_zichtjaar2017_metOnzHeid.txt\nsea_level_rise                 = 0.0\nsigma_function                 = Sigmafunctie\\Westerschelde\\VS_sigmafunctie_WS_2017.txt\nu_max                          = 55.0\nu_repair                       = True\nu_step                         = 1.0\nwind_direction_probability     = Windrichting\\Westerschelde\\KansenWindrichting_WS_2017.txt\nwind_speed_probability         = Windsnelheid\\Vlissingen\\Ovkanswind_Vlissingen_2017_metOnzHeid.txt\nx_coordinate                   = 38672\ny_coordinate                   = 383394\n```\n:::\n:::\n\n\nVoordat berekeningen worden gedaan is het mogelijk om het <i>Settings</i> object aan te passen:\n\n::: {#326e5593 .cell execution_count=7}\n``` {.python .cell-code}\nprint(\"Origineel:\", settings.m_max)\nsettings.m_max = 10.0\nprint(\"Aangepast:\", settings.m_max)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOrigineel: 9.0\nAangepast: 10.0\n```\n:::\n:::\n\n\n<h3>Location</h3>\n\nWanneer je tevreden bent met de settings in het <i>Settings</i> object, kan een <i>Location</i> object worden aangemaakt. Wanneer een location wordt aangemaakt lees Pydra de statistiek in en worden belastingsmodellen gegenereert. De statistiek wordt ingelezen vanuit de <i>data/statistics</i> map in de package. De belastingsmodellen worden geïnitieerd op basis van de eerder gekoppelde HR database in het <i>HRDatabase</i> object.\n\n::: {#11131641 .cell execution_count=8}\n``` {.python .cell-code}\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")  # future warnings are annoying\nlocation = hrdatabase.create_location(settings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nERROR: Execution failed on sql '\n                    SELECT ucf.HRDLocationId, ucf.ClosingSituationId, hrv.ResultVariableId, ucf.HRDResultColumnId2, ucf.Correlation\n                    FROM UncertaintyCorrelationFactor ucf\n                    INNER JOIN HRDResultVariables hrv\n                    ON ucf.HRDResultColumnId = hrv.HRDResultColumnId\n                    WHERE ucf.HRDLocationId = 146\n                    ': no such table: UncertaintyCorrelationFactor, continuing without correlation\n```\n:::\n:::\n\n\nNu het <i>Location</i> object is aangemaakt voor het HR uitvoerpunt 'WS_1_30-4_dk_00002', kan deze gebruikt worden in berekeningen.\n\n<h3>Overschrijdingsfrequentielijn voor één uitvoerpunt</h3>\n\nPydra heeft verschillende rekenmodules (objecten). Hieronder gebruiken we de <i>ExceedanceFrequencyLine</i> module om de overschrijdingsfrequentielijn te berekenen. Voordat we dat kunnen doen moet eerst een rekenobject worden aangemaakt, hieronder <i>fl</i>. Het rekenobject omvat de instellingen voor de berekening, bijvoorbeeld voor welke variabel een frequentielijn moet worden berekend (hieronder waterstand (h)). Daarnaast zijn er nog een aantal optionele opties, zoals of er met modelonzekerheden moet worden gerekend (standaard : True), de stapgrootte van de frequentielijn (standaard : 0.05) en een aangepast bereik van waterstanden voor de frequentielijn (standaard tussen de 1ste en 99de percentiel vanuit de HR database).\n\n::: {#76105037 .cell execution_count=9}\n``` {.python .cell-code}\nfl = pydra.ExceedanceFrequencyLine(\"h\", model_uncertainty=False)\n```\n:::\n\n\nVervolgens kunnen we met het rekenobject <i>fl</i> een overschrijdingsfrequentielijn bepalen voor HR uitvoerpunt 'WS_1_30-4_dk_00002' door de <i>calculate()</i> functie aan te roepen van het rekenobject en het <i>location</i> object als argument mee te geven.\n\n::: {#27fb8421 .cell execution_count=10}\n``` {.python .cell-code}\nfrequency_line = fl.calculate(location)\n```\n:::\n\n\nDit geeft een overschrijdingsfrequentielijn <i>frequency_line</i>. Het is een object waarin de berekende gegevens (waterstanden en overschrijdingsfrequenties) worden opgeslagen. Als je het object print, zie je wat er allemaal in zit.\n\n::: {#88d8962e .cell execution_count=11}\n``` {.python .cell-code}\nprint(frequency_line)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrequencyLine(level=array([ 4. ,  4.1,  4.2,  4.3,  4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,\n        5.1,  5.2,  5.3,  5.4,  5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,\n        6.2,  6.3,  6.4,  6.5,  6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,\n        7.3,  7.4,  7.5,  7.6,  7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,\n        8.4,  8.5,  8.6,  8.7,  8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,\n        9.5,  9.6,  9.7,  9.8,  9.9, 10. ]), exceedance_frequency=array([9.94146683e-02, 6.72207910e-02, 4.56219043e-02, 3.10054478e-02,\n       2.10762468e-02, 1.43146413e-02, 9.71920422e-03, 6.61635072e-03,\n       4.52069251e-03, 3.09403250e-03, 2.11855920e-03, 1.45101223e-03,\n       9.94944663e-04, 6.84217303e-04, 4.72480175e-04, 3.27514920e-04,\n       2.27672043e-04, 1.58622527e-04, 1.10775309e-04, 7.75910268e-05,\n       5.45422174e-05, 3.84913448e-05, 2.72802869e-05, 1.94117645e-05,\n       1.38561679e-05, 9.91612413e-06, 7.11218042e-06, 5.11145157e-06,\n       3.67977424e-06, 2.65317740e-06, 1.91566316e-06, 1.38482833e-06,\n       1.00177892e-06, 7.24892178e-07, 5.24569653e-07, 3.79511375e-07,\n       2.74460333e-07, 1.98370415e-07, 1.43245922e-07, 1.03302292e-07,\n       7.43562337e-08, 5.33828020e-08, 3.81941101e-08, 2.72066508e-08,\n       1.92730724e-08, 1.35607497e-08, 9.46425637e-09, 6.54235874e-09,\n       4.47271814e-09, 3.01935977e-09, 2.00931559e-09, 1.31582993e-09,\n       8.46232495e-10, 5.33113763e-10, 3.27833070e-10, 1.95682813e-10,\n       1.12245544e-10, 6.06302710e-11, 2.93744119e-11, 1.08615462e-11,\n       2.18367023e-12]))\n```\n:::\n:::\n\n\nHieronder is een plot van de berekende overschrijdingsfrequentielijn gegeven.\n\n::: {#f7aa3e71 .cell execution_count=12}\n``` {.python .cell-code}\ntt = np.array([10, 30, 100, 300, 1_000, 3_000, 10_000, 30_000, 100_000])\n\nplt.figure(figsize=[8, 5])\nplt.grid()\nplt.plot(tt, frequency_line.interpolate_exceedance_probability(1 / tt), label=\"Pydra\")\nplt.legend(loc=\"upper left\")\nplt.title(\"Overschrijdingsfrequentielijn waterstand (WS_1_30-4_dk_00002)\")\nplt.xscale(\"log\")\nplt.xticks([10, 100, 1_000, 10_000, 100_000])\nplt.xlabel(\"Terugkeertijd [jaar]\")\nplt.xlim(10, 100_000)\nplt.ylabel(\"Waterstand [NAP+m]\")\nplt.ylim(3.5, 7.0)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](01.Overschrijdingsfrequentielijnen_files/figure-html/cell-13-output-1.png){width=675 height=451}\n:::\n:::\n\n\nWe hebben dezelfde berekening gemaakt met Hydra-NL, wat de onderstaande vergelijking geeft.\n\n::: {#7abe1bb0 .cell execution_count=13}\n``` {.python .cell-code}\nhydranl_h = [3.998, 4.28, 4.592, 4.879, 5.198, 5.494, 5.828, 6.141, 6.497]\n\nplt.figure(figsize=[8, 5])\nplt.grid()\nplt.plot(tt, frequency_line.interpolate_exceedance_probability(1 / tt), label=\"Pydra\")\nplt.plot(tt, hydranl_h, \":\", label=\"Hydra-NL\")\nplt.legend(loc=\"upper left\")\nplt.title(\"Overschrijdingsfrequentielijn waterstand (WS_1_30-4_dk_00002)\")\nplt.xscale(\"log\")\nplt.xticks([1, 10, 100, 1_000, 10_000, 100_000, 1_000_000])\nplt.xlabel(\"Terugkeertijd [jaar]\")\nplt.xlim(10, 100_000)\nplt.ylabel(\"Waterstand [NAP+m]\")\nplt.ylim(3.5, 7.0)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](01.Overschrijdingsfrequentielijnen_files/figure-html/cell-14-output-1.png){width=675 height=451}\n:::\n:::\n\n\n<h3>Overschrijdingsfrequentielijn voor een heel traject</h3>\n\nHet is ook mogelijk om overschrijdingsfrequentielijnen voor een heel traject te genereren. Laten we weer een rekenobject <i>fl</i> aanmaken. Merk op dat we  ten opzichte van hierboven dit maal <i>model_uncertainty = False</i> hebben toegevoegd. Dit betekent dat we nu <u>zonder</u> modelonzekerheden rekenen.\n\n::: {#74345dbc .cell execution_count=14}\n``` {.python .cell-code}\nfl = pydra.ExceedanceFrequencyLine(\"hs\", model_uncertainty=False)\n```\n:::\n\n\nDoor het <i>HRDatabase</i> object '<i>hrdatabase</i>' mee te geven als argument in de <i>calculate()</i> functie, bepaald Pydra de overschrijdingsfrequentielijn voor <u>alle</u> uitvoerpunten in de HR database. Voor locaties die al zijn gedefinieerd, zoals 'WS_1_30-4_dk_00002', wordt het eerder gedefinieerde <i>Location</i> object gebruikt. Voor uitvoerpunten die nog niet zijn gedefinieerd creëert Pydra automatisch een <i>Location</i> object met de standaardwaarden voor het water systeem (net zoals Hydra-NL een 'invoer.hyd' aanmaakt in de beoordelingsmodus).\n\nMerk op dat dus in dit geval voor uitvoerpunt 'WS_1_30-4_dk_00002' met een <i>mmax</i> van NAP+10,0m wordt gerekend omdat we die eerder hebben aangepast. Voor de overige locaties wordt met de standaard NAP+9,0m gerekend.\n\n::: {#bc5a0a29 .cell execution_count=15}\n``` {.python .cell-code}\nfreq_lines = fl.calculate(hrdatabase)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nERROR: Execution failed on sql '\n                    SELECT ucf.HRDLocationId, ucf.ClosingSituationId, hrv.ResultVariableId, ucf.HRDResultColumnId2, ucf.Correlation\n                    FROM UncertaintyCorrelationFactor ucf\n                    INNER JOIN HRDResultVariables hrv\n                    ON ucf.HRDResultColumnId = hrv.HRDResultColumnId\n                    WHERE ucf.HRDLocationId = 142\n                    ': no such table: UncertaintyCorrelationFactor, continuing without correlation\nERROR: Execution failed on sql '\n                    SELECT ucf.HRDLocationId, ucf.ClosingSituationId, hrv.ResultVariableId, ucf.HRDResultColumnId2, ucf.Correlation\n                    FROM UncertaintyCorrelationFactor ucf\n                    INNER JOIN HRDResultVariables hrv\n                    ON ucf.HRDResultColumnId = hrv.HRDResultColumnId\n                    WHERE ucf.HRDLocationId = 143\n                    ': no such table: UncertaintyCorrelationFactor, continuing without correlation\nERROR: Execution failed on sql '\n                    SELECT ucf.HRDLocationId, ucf.ClosingSituationId, hrv.ResultVariableId, ucf.HRDResultColumnId2, ucf.Correlation\n                    FROM UncertaintyCorrelationFactor ucf\n                    INNER JOIN HRDResultVariables hrv\n                    ON ucf.HRDResultColumnId = hrv.HRDResultColumnId\n                    WHERE ucf.HRDLocationId = 144\n                    ': no such table: UncertaintyCorrelationFactor, continuing without correlation\nERROR: Execution failed on sql '\n                    SELECT ucf.HRDLocationId, ucf.ClosingSituationId, hrv.ResultVariableId, ucf.HRDResultColumnId2, ucf.Correlation\n                    FROM UncertaintyCorrelationFactor ucf\n                    INNER JOIN HRDResultVariables hrv\n                    ON ucf.HRDResultColumnId = hrv.HRDResultColumnId\n                    WHERE ucf.HRDLocationId = 145\n                    ': no such table: UncertaintyCorrelationFactor, continuing without correlation\nERROR: Execution failed on sql '\n                    SELECT ucf.HRDLocationId, ucf.ClosingSituationId, hrv.ResultVariableId, ucf.HRDResultColumnId2, ucf.Correlation\n                    FROM UncertaintyCorrelationFactor ucf\n                    INNER JOIN HRDResultVariables hrv\n                    ON ucf.HRDResultColumnId = hrv.HRDResultColumnId\n                    WHERE ucf.HRDLocationId = 147\n                    ': no such table: UncertaintyCorrelationFactor, continuing without correlation\n```\n:::\n:::\n\n\nOmdat we nu een heel traject doorrekenen, zal <i>calculate()</i> niet één frequentielijn returnen. In plaats daarvan wordt een dictionary gereturnd met als key de naam van het uitvoerpunt en als value het <i>FrequencyLine</i> resultaat object.\n\n::: {#4e1b4b04 .cell execution_count=16}\n``` {.python .cell-code}\nprint(freq_lines[\"WS_1_30-4_dk_00006\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFrequencyLine(level=array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,\n       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,\n       2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8]), exceedance_frequency=array([3.59999446e+02, 2.11103636e+02, 6.37386524e+01, 1.48868762e+01,\n       3.91035647e+00, 1.47486378e+00, 6.43080232e-01, 3.03598564e-01,\n       1.36933737e-01, 6.66240482e-02, 3.15949196e-02, 1.51863801e-02,\n       7.50939395e-03, 3.67264045e-03, 1.82304738e-03, 9.40031439e-04,\n       5.08985734e-04, 2.68976473e-04, 1.46097359e-04, 8.15615499e-05,\n       4.62984519e-05, 2.61301581e-05, 1.53889918e-05, 8.80943678e-06,\n       5.17749562e-06, 3.00626056e-06, 1.87503263e-06, 1.16560449e-06,\n       7.17687221e-07, 4.39546539e-07, 2.90961345e-07, 1.80292060e-07,\n       1.20956989e-07, 8.01031566e-08, 5.11561637e-08, 3.30546245e-08,\n       2.19297425e-08, 1.48800474e-08, 9.97659224e-09]))\n```\n:::\n:::\n\n\nEen overzicht van alle resultaten:\n\n::: {#8e68bf73 .cell execution_count=17}\n``` {.python .cell-code}\nplt.figure(figsize=[8, 5])\nplt.grid()\n\nfor _loc in freq_lines:\n    plt.plot(\n        1 / freq_lines[_loc].exceedance_frequency, freq_lines[_loc].level, label=_loc\n    )\n\nplt.legend(loc=\"upper left\")\nplt.title(\n    \"Overschrijdingsfrequentielijn significante golfhoogte zonder modelonzekerheid\"\n)\nplt.xscale(\"log\")\nplt.xticks([1, 10, 100, 1_000, 10_000, 100_000])\nplt.xlabel(\"Terugkeertijd [jaar]\")\nplt.xlim(1, 100_000)\nplt.ylabel(\"Significante golfhoogte [m]\")\nplt.ylim(0, None)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](01.Overschrijdingsfrequentielijnen_files/figure-html/cell-18-output-1.png){width=669 height=451}\n:::\n:::\n\n\n\n",
    "supporting": [
      "01.Overschrijdingsfrequentielijnen_files"
    ],
    "filters": [],
    "includes": {}
  }
}